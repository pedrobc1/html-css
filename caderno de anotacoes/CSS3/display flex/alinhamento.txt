we'll always use the display flex in the parent element
      parent  .conteiner{
            display: flex;
            background-color: grey;
        }
       child .item{
            background-color: black;
            color: white;
            border: 1px solid rgb(46, 153, 60);
            flex: auto;
            text-align: center;
        }
the flex auto that we see in the child will turn the items into fluid div that will take all the parent width 

parent codes------------------------

flex direction
it will determine the direction that the childs will take
flex direction row ----->
flex direction row reverse <------
flex direction column: from top to bottom
all of it has his reverse option

axis (eixos)

main axis ------->
cross axis from top to bottom
each axis has their start and end. we can imagine it like a cartesian plan

the reverse of the flex directions will reverse the axis directions
the main axis will be always disposed by the start of the items.

flex wrap
it determines the behavior of the parent : if it will wrap or not
flex wrap, by default, will come as nowrap
flex wrap: wrap - it will wrap in the direction of the cross axis
flex wrap: wrap reverse - it will wrap in the opposite direction of the cross axis
flex flow is the shorthand = flex direction + flex wrap

justify content
it will align the items in the main axis
flex-start - the first item will stick to the main start
flex-end - the first item will stick to the main end
center - the items will be disposed in the center of the main axis
space-between - the items will be disposed equally in the main axis : the first item in the main start and the last item in the main end
space-evenly - the items will be disposed equally in the mais axis : before and after the items we will have the same spacing
space-around - the items have something like a 'margin' on their sides, so in the main start we have the spacing of only one 'margin', and between the items we have two 'margin' : one of each item

align-items
it will align the items in the cross axis
stretch - is the default value. it will stretch the items in the cross axis
flex start - the first item will stick to the cross start
flex end - the first item will stick to the cross end
center - the items will be disposed in the center of the cross axis
we only have these options in align items, but there other properties that can handle the spacing in the cross axis

align-content
it will align the items in the cross axis WHEN THEYRE PACKAGED
stretch - is the default value . it will brake the cross axis equally in the amount of lines wrapped and stretch the items into these divisions
flex-start - the items will stick to the cross start
flex-end - the items will stick to the cross end
center - the items will be disposed in the center of the cross axis
space-between - the items will be disposed equally in the cross axis : the first item in the cross start and the item that wrapped in the cross end
space-evenly - the items will be disposed equally in the cross axis : before and after the items we will have the same spacing
space-around - the items have something like a 'margin' on their sides, so in the cross start we have the spacing of only one 'margin', and between the items we have two 'margin' : one of each item. It depends on how much wraps we have

child codes--------------------
order - every item has order 0. the items with the lower order will be showed first

align-self - ii will align each item in the cross axis
auto - it will inherit from his parent
flex-start, flex-end, center, stretch
they will work same as align items, but in each item, so we can have many alignments in each items

flex-basis
it will determine the size of the item
auto - default. the size of the item will be adapted by the size of the content
200px (example) the items will have 200px 
theyre flexible, so if there aren't space for it, the items will reduce equally (only nowrap)

can it shrink? can it grow?
default: flex-shrink:1 flex-grow:0
flex-shrink
it defines if the item can shrink or not
1 - can
0 - cannot (can cause overflow)
flex-grow
it defines if the item can grow or not
1- can
0- cannot
you can apply in each item
if i apply other higher values on it, it will shrink or grow proportionally
example:
item1-flexgrow 1
item2-flexgrow 2
the item2 will grow 2 times more than the item1, because 2 is two time bigger than 1, so if i want a third item that grows two times more than the item2, i have to attribute the value 4, because four is two times bigger than 2:
item1-flexgrow 1
item2-flexgrow 2
item3-flexgrow 4
this will work equally for flexshrink

flex (shorthand)
item1 (without flex)
flex basis 150px
flexshrink 3
flexgrow 2
item1 (with flex shorthand)
flex: 2(grow) 3(shrink) 150px(basis);
auto - the child will fill all the size of the div
when you use the flex auto and the flex wrap togheter, the child will only wrap when there is no more space for the div content or it beat the flex basis
flex: 0 1 auto = initial (default)
flex: 0 0 auto = none (it dont grow or shrink, and the size is adapted for the content)
flex: 1 1 auto = auto (it grows and shrinks)
flex: 3 1 auto = 3 (if the flex comes only with a number, it means that the flex grow of this element is 3. the other values are 
standardized